-- Create the 'DataWarehouseAnalytics' database
CREATE DATABASE DataWarehouseAnalytics;
USE DataWarehouseAnalytics;

-- Create Schemas
CREATE SCHEMA gold;

CREATE TABLE gold.dim_customers(
	customer_key int,
	customer_id int,
	customer_number nvarchar(50),
	first_name nvarchar(50),
	last_name nvarchar(50),
	country nvarchar(50),
	marital_status nvarchar(50),
	gender nvarchar(50),
	birthdate date,
	create_date date
);


CREATE TABLE gold.dim_products(
	product_key int ,
	product_id int ,
	product_number nvarchar(50) ,
	product_name nvarchar(50) ,
	category_id nvarchar(50) ,
	category nvarchar(50) ,
	subcategory nvarchar(50) ,
	maintenance nvarchar(50) ,
	cost int,
	product_line nvarchar(50),
	start_date date 
);


CREATE TABLE gold.fact_sales(
	order_number nvarchar(50),
	product_key int,
	customer_key int,
	order_date date,
	shipping_date date,
	due_date date,
	sales_amount int,
	quantity tinyint,
	price int 
);


SELECT * FROM gold.dim_customers;

SELECT * FROM gold.dim_products;

SELECT * FROM gold.fact_sales;

-- Explore all objects in the database
SELECT * FROM INFORMATION_SCHEMA.TABLES;

-- Explore all columns in the database
SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'dim_customers';

-- Explore all the countries our customers come from.
SELECT DISTINCT country
FROM gold.dim_customers;

-- Explore all categories 'The major Division'
SELECT DISTINCT category, subcategory, product_name
FROM gold.dim_products
ORDER BY 1,2,3;

-- Find the date of the first and last order. How many years of sales are avilable
SELECT 
MIN(order_date) AS first_order_date,
MAX(order_date) AS last_order_date,
TIMESTAMPDIFF(YEAR, MIN(order_date), MAX(order_date)) AS order_years_range
FROM gold.fact_sales;

-- Find the youngest and oldest customrer
SELECT
MIN(birthdate) AS oldest_birthdate,
TIMESTAMPDIFF(YEAR, MIN(birthdate), CURDATE()) AS oldest_age,
MAX(birthdate) AS youngest_birthdate,
TIMESTAMPDIFF(YEAR, MAX(birthdate), CURDATE()) AS oldest_age
FROM gold.dim_customers;

-- Find the total sales
SELECT 
SUM(sales_amount) AS total_sales
FROM gold.fact_sales;

-- Find how many items are sold
SELECT 
SUM(quantity) AS total_quantity
FROM gold.fact_sales;

-- Find the average selling price
SELECT
ROUND(AVG(price),2) AS avg_price
FROM gold.fact_sales;

-- Find the total number of orders
SELECT
COUNT(DISTINCT order_number) AS total_orders
FROM gold.fact_sales;

-- Find the total number of products
SELECT
COUNT(product_key) AS total_products
FROM gold.dim_products;

-- Find the total number of customers
SELECT
COUNT(customer_key) AS total_customers
FROM gold.dim_customers;

-- Find the total numbers of customers that has placed an order
SELECT
COUNT(DISTINCT customer_key) AS total_customers
FROM gold.fact_sales;

-- Generate a report that shows all key metrics of business
SELECT 'Total Sales' AS measure_name, SUM(sales_amount) AS measure_value
FROM gold.fact_sales
UNION ALL
SELECT 'Total Quantity', SUM(quantity)
FROM gold.fact_sales
UNION ALL
SELECT 'Average Price', AVG(price)
FROM gold.fact_sales
UNION ALL
SELECT 'Total num of Orders', COUNT(DISTINCT order_number)
FROM gold.fact_sales
UNION ALL
SELECT 'Total num of Products', COUNT(DISTINCT product_name)
FROM gold.dim_products
UNION ALL
SELECT 'Total num of Customers', COUNT(customer_key)
FROM gold.dim_customers;

-- Find total customers by countries
SELECT country,
COUNT(customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY country
ORDER BY total_customers DESC;

-- Find total customers by gender
SELECT gender,
COUNT(customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY gender
ORDER BY total_customers DESC;

-- Find total products by category
SELECT category,
COUNT(product_key) AS total_products
FROM gold.dim_products
GROUP BY category
ORDER BY total_products DESC;

-- What is the average cost for each category
SELECT category,
ROUND(AVG(cost),2) AS avg_costs
FROM gold.dim_products
GROUP BY category
ORDER BY avg_costs DESC;

-- What is the total revenue genersted for each category
SELECT p.category,
SUM(s.sales_amount) AS total_revenue
FROM gold.fact_sales s
LEFT JOIN gold.dim_products p
ON p.product_key = s.product_key
GROUP BY p.category
ORDER BY total_revenue DESC;

-- What is the total revenue generated by each customers
SELECT c.customer_key,
c.first_name, c.last_name,
SUM(s.sales_amount) AS total_revenue
FROM gold.fact_sales s
LEFT JOIN gold.dim_customers c
ON c.customer_key = s.customer_key
GROUP BY c.customer_key,
c.first_name, c.last_name
ORDER BY total_revenue DESC;

-- What is the distribution of sold items across countries
SELECT c.country,
SUM(s.quantity) AS total_sold_items
FROM gold.fact_sales s
LEFT JOIN gold.dim_customers c
ON c.customer_key = s.customer_key
GROUP BY c.country
ORDER BY total_sold_items DESC;

-- Which 5 products generate the highest revenue
SELECT
p.product_name,
SUM(s.sales_amount) AS total_revenue
FROM gold.fact_sales s
LEFT JOIN gold.dim_products p
ON s.product_key = p.product_key
GROUP BY p.product_name
ORDER BY total_revenue DESC
LIMIT 5;

SELECT *
FROM(
		SELECT
		p.product_name,
		SUM(s.sales_amount) AS total_revenue,
		ROW_NUMBER() OVER(ORDER BY SUM(s.sales_amount) DESC) AS rnk
		FROM gold.fact_sales s
		LEFT JOIN gold.dim_products p
		ON s.product_key = p.product_key
		GROUP BY p.product_name
		ORDER BY rnk) t
WHERE t.rnk<=5;

-- What are the 5 worst performing products in terms of sales
SELECT
p.product_name,
SUM(s.sales_amount) AS total_revenue
FROM gold.fact_sales s
LEFT JOIN gold.dim_products p
ON s.product_key = p.product_key
GROUP BY p.product_name
ORDER BY total_revenue 
LIMIT 5;

-- Find the top 10 customers woh have generated highest revenue
SELECT c.customer_key,
c.first_name, c.last_name,
SUM(s.sales_amount) AS total_revenue
FROM gold.fact_sales s
LEFT JOIN gold.dim_customers c
ON c.customer_key = s.customer_key
GROUP BY c.customer_key,
c.first_name, c.last_name
ORDER BY total_revenue DESC
LIMIT 10;

-- The 3 customers with the fewest order placed
SELECT 
c.customer_key,
c.first_name, c.last_name,
COUNT(DISTINCT order_number) AS total_orders
FROM gold.fact_sales s
LEFT JOIN gold.dim_customers c
ON c.customer_key = s.customer_key
GROUP BY c.customer_key,
c.first_name, c.last_name
ORDER BY total_orders
LIMIT 3;